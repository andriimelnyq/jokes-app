{"version":3,"sources":["types/ErrorText.ts","app/hooks.ts","api.tsx","features/jokes.ts","components/Loader/Loader.tsx","components/JokeCard/JokeCard.tsx","components/JokesList/JokesList.tsx","App.tsx","app/store.ts","index.tsx"],"names":["ErrorText","useAppDispatch","useDispatch","useAppSelector","useSelector","BASE_URL","getTenJokes","fetch","then","res","json","getRandomJoke","initialState","jokes","loading","error","NONE","getLocaleJokes","jokesJSON","localStorage","getItem","JSON","parse","init","createAsyncThunk","_","a","dispatch","localeJokes","loadedJokes","localeJokesIds","map","joke","id","loadedJokesIds","every","jokeId","includes","slice","loadMore","getState","jokesIds","addNew","newJoke","jokesSlice","createSlice","name","reducers","set","state","action","payload","setError","delete","setItem","stringify","filter","extraReducers","builder","addCase","pending","fulfilled","rejected","LOAD_JOKES","LOAD_RANDOM_JOKE","actions","Loader","card","className","CircularProgress","sx","margin","JokeCard","setup","punchline","type","useState","loadingNewJoke","setLoadingNewJoke","handleClickRefresh","some","curJoke","refreshedJokeState","currentJoke","jokesActions","Card","Typography","fontSize","color","gutterBottom","variant","mb","IconButton","onClick","Close","titleAccess","Button","JokesList","App","useEffect","align","fontWeight","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","store","configureStore","reducer","theme","createTheme","palette","primary","main","secondary","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.d6492a8d.chunk.js","sourcesContent":["export enum ErrorText {\n  LOAD_JOKES = 'Unable to load jokes. Try again later!',\n  LOAD_RANDOM_JOKE = 'Unable to load new joke. Try again later!',\n  NONE = '',\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","const BASE_URL = 'https://official-joke-api.appspot.com';\n\nexport const getTenJokes = () => {\n  return fetch(`${BASE_URL}/jokes/ten`).then(res => res.json());\n};\n\nexport const getRandomJoke = () => {\n  return fetch(`${BASE_URL}/jokes/random`).then(res => res.json());\n};\n","import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { JokeType } from '../types/JokeType';\nimport { ErrorText } from '../types/ErrorText';\nimport { getRandomJoke, getTenJokes } from '../api';\n\ntype jokesStateType = {\n  jokes: JokeType[],\n  loading: boolean,\n  error: ErrorText,\n};\n\nconst initialState: jokesStateType = {\n  jokes: [],\n  loading: false,\n  error: ErrorText.NONE,\n};\n\nexport const getLocaleJokes = () => {\n  const jokesJSON = localStorage.getItem('jokes');\n  const localeJokes: JokeType[] = (jokesJSON ? JSON.parse(jokesJSON) : []);\n\n  return (localeJokes);\n};\n\nexport const init = createAsyncThunk('jokes/fetch', async (_, { dispatch }) => {\n  const localeJokes = getLocaleJokes();\n  const loadedJokes = await getTenJokes();\n\n  const localeJokesIds = localeJokes.map((joke: JokeType) => joke.id);\n  const loadedJokesIds = loadedJokes.map((joke: JokeType) => joke.id);\n\n  const areNewJokesUnique = loadedJokesIds\n    .every((jokeId: number) => !localeJokesIds.includes(jokeId));\n\n  if (!areNewJokesUnique) {\n    await dispatch(init());\n\n    return [];\n  }\n\n  return [...localeJokes, ...loadedJokes].slice(0, 10);\n});\n\nexport const loadMore = createAsyncThunk('jokesMore/fetch', async (_, { getState, dispatch }) => {\n  const { jokes } = getState() as { jokes: jokesStateType };\n  const loadedJokes = await getTenJokes();\n\n  const jokesIds = jokes.jokes.map((joke: JokeType) => joke.id);\n  const loadedJokesIds = loadedJokes.map((joke: JokeType) => joke.id);\n\n  const areNewJokesUnique = loadedJokesIds.every((jokeId: number) => !jokesIds.includes(jokeId));\n\n  if (!areNewJokesUnique) {\n    await dispatch(loadMore());\n\n    return [];\n  }\n\n  return loadedJokes;\n});\n\nexport const addNew = createAsyncThunk('joke/fetch', async (_, { getState, dispatch }) => {\n  const { jokes } = getState() as { jokes: jokesStateType };\n  const newJoke = await getRandomJoke();\n\n  const isNewJokeUnique = jokes.jokes.every(joke => joke.id !== newJoke.id);\n\n  if (!isNewJokeUnique) {\n    await dispatch(addNew());\n\n    return [];\n  }\n\n  return [newJoke];\n});\n\nconst jokesSlice = createSlice({\n  name: 'jokes',\n  initialState,\n  reducers: {\n    set: (state, action: PayloadAction<JokeType[]>) => {\n      return { ...state, jokes: action.payload };\n    },\n    setError: (state, action: PayloadAction<ErrorText>) => {\n      return { ...state, error: action.payload };\n    },\n    delete: (state, action: PayloadAction<number>) => {\n      const jokes = getLocaleJokes();\n\n      localStorage.setItem('jokes', JSON.stringify(\n        jokes.filter(joke => joke.id !== action.payload),\n      ));\n\n      return {\n        ...state,\n        jokes: state.jokes.filter(joke => joke.id !== action.payload),\n      };\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(init.pending, (state) => {\n      return ({ ...state, loading: true });\n    });\n\n    builder.addCase(init.fulfilled, (state, action) => {\n      return ({ ...state, jokes: action.payload, loading: false });\n    });\n\n    builder.addCase(init.rejected, (state) => {\n      return ({ ...state, error: ErrorText.LOAD_JOKES, loading: false });\n    });\n\n    builder.addCase(loadMore.pending, (state) => {\n      return ({ ...state, loading: true });\n    });\n\n    builder.addCase(loadMore.fulfilled, (state, action) => {\n      return ({\n        ...state,\n        loading: false,\n        jokes: [...state.jokes, ...action.payload],\n      });\n    });\n\n    builder.addCase(loadMore.rejected, (state) => {\n      return ({ ...state, error: ErrorText.LOAD_JOKES, loading: false });\n    });\n\n    builder.addCase(addNew.pending, (state) => {\n      return ({ ...state, loading: true });\n    });\n\n    builder.addCase(addNew.fulfilled, (state, action) => {\n      const jokes = getLocaleJokes();\n\n      localStorage.setItem('jokes', JSON.stringify([...action.payload, ...jokes]));\n\n      return ({\n        ...state,\n        loading: false,\n        jokes: [...state.jokes, ...action.payload],\n      });\n    });\n\n    builder.addCase(addNew.rejected, (state) => {\n      return ({ ...state, error: ErrorText.LOAD_RANDOM_JOKE, loading: false });\n    });\n  },\n});\n\nexport default jokesSlice;\nexport const { actions } = jokesSlice;\n","import { CircularProgress } from '@mui/material';\nimport React from 'react';\nimport './Loader.scss';\n\ntype Props = {\n  card?: boolean,\n};\n\nexport const Loader: React.FC<Props> = ({ card }) => (\n  <div\n    className={card ? 'loader loader--card' : 'loader'}\n  >\n    <CircularProgress\n      sx={{\n        margin: 'auto',\n      }}\n    />\n  </div>\n);\n","import React, { useState } from 'react';\nimport {\n  Button, Card, IconButton, Typography,\n} from '@mui/material';\nimport { Close } from '@mui/icons-material';\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport { JokeType } from '../../types/JokeType';\nimport './JokeCard.scss';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport * as jokesActions from '../../features/jokes';\nimport { getRandomJoke } from '../../api';\nimport { ErrorText } from '../../types/ErrorText';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  joke: JokeType;\n};\n\nexport const JokeCard: React.FC<Props> = ({ joke }) => {\n  const {\n    id, setup, punchline, type,\n  } = joke;\n  const [loadingNewJoke, setLoadingNewJoke] = useState(false);\n  const dispatch = useAppDispatch();\n  const { jokes } = useAppSelector(state => state.jokes);\n\n  const handleClickAdd = () => dispatch(jokesActions.addNew());\n\n  const handleClickDelete = () => dispatch(jokesActions.actions.delete(id));\n\n  const handleClickRefresh = async () => {\n    try {\n      setLoadingNewJoke(true);\n      const newJoke = await getRandomJoke();\n      const isNewJokeUnique = !jokes.some(curJoke => curJoke.id === newJoke.id);\n\n      if (isNewJokeUnique) {\n        const refreshedJokeState = jokes.map(currentJoke => (\n          currentJoke.id === id ? newJoke : currentJoke\n        ));\n\n        dispatch(jokesActions.actions.set(refreshedJokeState));\n        localStorage.setItem('jokes', JSON.stringify(jokesActions.getLocaleJokes().map(currentJoke => (\n          currentJoke.id === id ? newJoke : currentJoke\n        ))));\n      } else {\n        await handleClickRefresh();\n      }\n    } catch (error) {\n      dispatch(jokesActions.actions.setError(ErrorText.LOAD_RANDOM_JOKE));\n    } finally {\n      setLoadingNewJoke(false);\n    }\n  };\n\n  return (\n    <Card className=\"joke-card\">\n      {loadingNewJoke && (<Loader card />)}\n\n      <div className=\"joke-card__content\">\n        <div className=\"joke-card__row\">\n          <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n            Type:\n            {' '}\n            {type}\n          </Typography>\n\n          <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n            ID\n            {' '}\n            #\n            {joke.id}\n          </Typography>\n        </div>\n\n        <div className=\"joke-card__main\">\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Setup:\n          </Typography>\n\n          <Typography variant=\"body2\" sx={{ mb: 1 }}>\n            {setup}\n          </Typography>\n\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Punchline:\n          </Typography>\n\n          <Typography variant=\"body2\">\n            {punchline}\n          </Typography>\n        </div>\n\n        <div className=\"joke-card__row--transparent\">\n          <IconButton\n            onClick={handleClickDelete}\n          >\n            <Close titleAccess=\"delete\" />\n          </IconButton>\n\n          <Button\n            variant=\"text\"\n            onClick={handleClickAdd}\n          >\n            Add\n          </Button>\n\n          <IconButton onClick={handleClickRefresh}>\n            <ReplayIcon titleAccess=\"update\" />\n          </IconButton>\n        </div>\n      </div>\n    </Card>\n  );\n};\n","import React from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { JokeCard } from '../JokeCard/JokeCard';\nimport './JokeList.scss';\n\nexport const JokesList = () => {\n  const { jokes } = useAppSelector(state => state.jokes);\n\n  return (\n    <div className=\"joke-list\">\n      {jokes.map(joke => (\n        <JokeCard\n          key={joke.setup}\n          joke={joke}\n        />\n      ))}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport {\n  Snackbar, Alert, Typography, Button,\n} from '@mui/material';\nimport './App.scss';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { init, actions, loadMore } from './features/jokes';\nimport { Loader } from './components/Loader';\nimport { ErrorText } from './types/ErrorText';\nimport { JokesList } from './components/JokesList';\n\nexport const App: React.FC = () => {\n  const { loading, error } = useAppSelector(state => state.jokes);\n  const dispatch = useAppDispatch();\n  const handleClickLoadMore = () => dispatch(loadMore());\n\n  useEffect(() => {\n    dispatch(init());\n  }, []);\n\n  return (\n    <>\n      <div className=\"app\">\n        <Typography variant=\"h2\" align=\"center\" color=\"primary\" sx={{ fontWeight: 'bold' }}>\n          Jokes\n        </Typography>\n\n        <JokesList />\n\n        {loading\n          ? <Loader />\n          : (\n            <Button variant=\"contained\" onClick={handleClickLoadMore}>\n              Load more\n            </Button>\n          )}\n      </div>\n\n      <Snackbar\n        open={error !== ErrorText.NONE}\n        autoHideDuration={5000}\n        onClose={() => dispatch(actions.setError(ErrorText.NONE))}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      >\n        <Alert severity=\"error\">\n          {error}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport jokesSlice from '../features/jokes';\n\nexport const store = configureStore({\n  reducer: {\n    jokes: jokesSlice.reducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createTheme, ThemeProvider } from '@mui/material';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './app/store';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#FF4747',\n    },\n    secondary: {\n      main: '#FC8B8B',\n    },\n  },\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}